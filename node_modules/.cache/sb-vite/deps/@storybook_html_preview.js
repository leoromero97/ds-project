import {
  SNIPPET_RENDERED,
  SourceType,
  enhanceArgTypes
} from "./chunk-3ZN4BJ5M.js";
import {
  dedent
} from "./chunk-UNIGM5H3.js";
import "./chunk-HOHVDKYD.js";
import "./chunk-J2W3PG5K.js";
import "./chunk-L5QKQI4C.js";
import "./chunk-GVPC3BLX.js";
import "./chunk-5FZ5NSJI.js";
import "./chunk-TBGVDRVK.js";
import "./chunk-27YXS6Z4.js";
import "./chunk-T7FQGKEX.js";
import "./chunk-HYXSEZOB.js";
import "./chunk-2LMSPZIY.js";
import "./chunk-4RBHHDPR.js";
import "./chunk-J6HFXZNO.js";
import "./chunk-D77EGXAT.js";
import "./chunk-IWTEHQKN.js";
import "./chunk-24KVSIIW.js";
import "./chunk-IQER53KA.js";
import "./chunk-L6AIOZ5I.js";
import "./chunk-JGCV6KHD.js";
import "./chunk-ULLF6AZP.js";
import "./chunk-BZ65RA32.js";
import "./chunk-RROK22IH.js";
import "./chunk-PF7FMA4F.js";
import "./chunk-FLFJHAWX.js";
import "./chunk-43VDWC3R.js";
import {
  require_global
} from "./chunk-TH4V72IO.js";
import {
  require_preview_api
} from "./chunk-NMBB7OXV.js";
import {
  __toESM
} from "./chunk-WNKWOKNR.js";

// node_modules/@storybook/html/dist/chunk-JHBKUHDQ.mjs
var import_global = __toESM(require_global(), 1);
var import_preview_api = __toESM(require_preview_api(), 1);
var { Node } = import_global.global;
var render = (args, context) => {
  let { id, component: Component } = context;
  if (typeof Component == "string") {
    let output = Component;
    return Object.keys(args).forEach((key) => {
      output = output.replace(`{{${key}}}`, args[key]);
    }), output;
  }
  if (Component instanceof HTMLElement) {
    let output = Component.cloneNode(true);
    return Object.keys(args).forEach((key) => {
      output.setAttribute(key, typeof args[key] == "string" ? args[key] : JSON.stringify(args[key]));
    }), output;
  }
  if (typeof Component == "function")
    return Component(args, context);
  throw console.warn(dedent`
    Storybook's HTML renderer only supports rendering DOM elements and strings.
    Received: ${Component}
  `), new Error(`Unable to render story ${id}`);
};
function renderToCanvas({ storyFn, kind, name, showMain, showError, forceRemount }, canvasElement) {
  let element = storyFn();
  if (showMain(), typeof element == "string")
    canvasElement.innerHTML = element, (0, import_preview_api.simulatePageLoad)(canvasElement);
  else if (element instanceof Node) {
    if (canvasElement.firstChild === element && forceRemount === false)
      return;
    canvasElement.innerHTML = "", canvasElement.appendChild(element), (0, import_preview_api.simulateDOMContentLoaded)();
  } else
    showError({ title: `Expecting an HTML snippet or DOM node from the story: "${name}" of "${kind}".`, description: dedent`
        Did you forget to return the HTML snippet from the story?
        Use "() => <your snippet or node>" or when defining the story.
      ` });
}

// node_modules/@storybook/html/dist/config.mjs
var import_preview_api2 = __toESM(require_preview_api(), 1);
function skipSourceRender(context) {
  var _a;
  let sourceParams = (_a = context == null ? void 0 : context.parameters.docs) == null ? void 0 : _a.source, isArgsStory = context == null ? void 0 : context.parameters.__isArgsStory;
  return (sourceParams == null ? void 0 : sourceParams.type) === SourceType.DYNAMIC ? false : !isArgsStory || (sourceParams == null ? void 0 : sourceParams.code) || (sourceParams == null ? void 0 : sourceParams.type) === SourceType.CODE;
}
function sourceDecorator(storyFn, context) {
  var _a, _b;
  let story = storyFn(), renderedForSource = ((_b = (_a = context == null ? void 0 : context.parameters.docs) == null ? void 0 : _a.source) == null ? void 0 : _b.excludeDecorators) ? context.originalStoryFn(context.args, context) : story, source;
  return skipSourceRender(context) || (typeof renderedForSource == "string" ? source = renderedForSource : renderedForSource instanceof Element && (source = renderedForSource.outerHTML)), (0, import_preview_api2.useEffect)(() => {
    let { id, unmappedArgs } = context;
    source && import_preview_api2.addons.getChannel().emit(SNIPPET_RENDERED, { id, args: unmappedArgs, source });
  }), story;
}
var decorators = [sourceDecorator];
var parameters = { docs: { story: { inline: true }, source: { type: SourceType.DYNAMIC, language: "html", code: void 0, excludeDecorators: void 0 } } };
var argTypesEnhancers = [enhanceArgTypes];
var parameters2 = { renderer: "html", ...parameters };
export {
  argTypesEnhancers,
  decorators,
  parameters2 as parameters,
  render,
  renderToCanvas
};
//# sourceMappingURL=@storybook_html_preview.js.map
